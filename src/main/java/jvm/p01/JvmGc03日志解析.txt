代码：
/**
 * 参考：https://blog.csdn.net/zp522123428/article/details/53635161
 */
public class JvmGc03 {

	public static void main(String[] args) {
		new JvmGc03().doTest();
	}

	public void doTest() {
		Integer M = new Integer(1024 * 1024 * 1); //单位, 兆(M)
		byte[] bytes = new byte[5 * M]; //申请1M 大小的内存空间
		bytes = null; //断开引用链
		System.gc(); //通知 GC 收集垃圾
		System.out.println();
		bytes = new byte[10 * M]; //重新申请1M 大小的内存空间
		bytes = new byte[4 * M]; //再次申请1M 大小的内存空间
		System.gc();
		System.out.println();
	}

}

---------------------------------------------------------------
测试环境
C:\Users\Administrator>java -version
java version "1.8.0_40"
Java(TM) SE Runtime Environment (build 1.8.0_40-b25)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)

---------------------------------------------------------------
VM arguments：
-Xms60m -Xmx60m -Xmn20m -XX:NewRatio=2 -XX:SurvivorRatio=8 -XX:MetaspaceSize=30m -XX:MaxMetaspaceSize=30m -XX:+PrintGCDetails

参考代码中的写法为：
-Xms60m -Xmx60m -Xmn20m -XX:NewRatio=2 -XX:SurvivorRatio=8 -XX:PermSize=30m -XX:MaxPermSize=30m -XX:+PrintGCDetails
已不适用于jdk1.8，PermSize和MaxPermSize分别被MetaspaceSize和MaxMetaspaceSize取代，便要用的话，控制台则报红字：
“
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=30m; support was removed in 8.0
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=30m; support was removed in 8.0
”

-XX:NewRatio=2，可以理解为老年代容积为新生代的2倍
-XX:SurvivorRatio=8，可以理解为eden区容积为survivor区的8倍
-XX:+PrintGCDetails，控制台输出jvm日志的关键

---------------------------------------------------------------
GCDetails:
[GC (System.gc()) [PSYoungGen: 6759K->792K(18432K)] 6759K->800K(59392K), 0.0006007 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC (System.gc()) [PSYoungGen: 792K->0K(18432K)] [ParOldGen: 8K->636K(40960K)] 800K->636K(59392K), [Metaspace: 2556K->2556K(1056768K)], 0.0032951 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 

[GC (System.gc()) [PSYoungGen: 14663K->64K(18432K)] 15299K->4796K(59392K), 0.0015513 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC (System.gc()) [PSYoungGen: 64K->0K(18432K)] [ParOldGen: 4732K->4731K(40960K)] 4796K->4731K(59392K), [Metaspace: 2557K->2557K(1056768K)], 0.0044910 secs] [Times: user=0.06 sys=0.00, real=0.02 secs] 

Heap
 PSYoungGen      total 18432K, used 164K [0x00000000fec00000, 0x0000000100000000, 0x0000000100000000)
  eden space 16384K, 1% used [0x00000000fec00000,0x00000000fec29100,0x00000000ffc00000)
  from space 2048K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x0000000100000000)
  to   space 2048K, 0% used [0x00000000ffc00000,0x00000000ffc00000,0x00000000ffe00000)
 ParOldGen       total 40960K, used 4731K [0x00000000fc400000, 0x00000000fec00000, 0x00000000fec00000)
  object space 40960K, 11% used [0x00000000fc400000,0x00000000fc89eea0,0x00000000fec00000)
 Metaspace       used 2563K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 273K, capacity 386K, committed 512K, reserved 1048576K

---------------------------------------------------------------
GCDetails解析:
[GC (System.gc()) [PSYoungGen: 6759K->792K(18432K)] 6759K->800K(59392K), 0.0006007 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
PSYoungGen                       ：Parallel Scavenge Young Generation
18432K                           ：eden区 + from区的容积，所以不为20480k(20m)
[PSYoungGen: 6759K->792K(18432K)]：新生代在GC后的变化。至于为什么最后不是0，我想，除了bytes外，还有本类实例，以及Integer M，等等对象存在
59392K                           ：新生代和老年代的总容积，即，18432K + 40960K = 59392K
6759K->800K(59392K)              ：新生代和老年代在GC后的变化

[Full GC (System.gc()) [PSYoungGen: 792K->0K(18432K)] [ParOldGen: 8K->636K(40960K)] 800K->636K(59392K), [Metaspace: 2556K->2556K(1056768K)], 0.0032951 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
ParOldGen                        ：Parallel Old Generation?
PSYoungGen: 792K->0K(18432K)     ：新生代在Full GC后的变化。此时，新生代中的对象被转移到老年代，以致“0K”的出现。
[ParOldGen: 8K->636K(40960K)]    ：老年代在Full GC后的变化。接纳了来自新生代的对象
800K->636K(59392K)               ：新生代和老年代在Full GC后的变化

[GC (System.gc()) [PSYoungGen: 14663K->64K(18432K)] 15299K->4796K(59392K), 0.0015513 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
大体同上

[Full GC (System.gc()) [PSYoungGen: 64K->0K(18432K)] [ParOldGen: 4732K->4731K(40960K)] 4796K->4731K(59392K), [Metaspace: 2557K->2557K(1056768K)], 0.0044910 secs] [Times: user=0.06 sys=0.00, real=0.02 secs] 
大体同上

Heap
 PSYoungGen      total 18432K, used 164K [0x00000000fec00000, 0x0000000100000000, 0x0000000100000000)
  eden space 16384K, 1% used [0x00000000fec00000,0x00000000fec29100,0x00000000ffc00000)
  from space 2048K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x0000000100000000)
  to   space 2048K, 0% used [0x00000000ffc00000,0x00000000ffc00000,0x00000000ffe00000)
1.18432K = 16384K + 2048K，即eden区容积和一个survivor区容积之和。16384K + 2048K + 2048K = 20480K，表明-Xmn20m存在作用。其实我认为-XX:NewRatio=2足矣。
2.每个“[)”中都有三个“0x”开头的十六进制数，第一个表示begin，第二个减去第一个就是当前已用空间，第三个减去第一个就是容积，例：
    0x0000000100000000
  - 0x00000000fec00000
  --------------------
    0x0000000001400000
  差转为十进制后，为 20971520，20971520 / 1024 = 20480，单位为K，即20m
3.注意，eden - to - from，首尾相连

 ParOldGen       total 40960K, used 4731K [0x00000000fc400000, 0x00000000fec00000, 0x00000000fec00000)
1.PSYoungGen和ParOldGen首尾相连

  object space 40960K, 11% used [0x00000000fc400000,0x00000000fc89eea0,0x00000000fec00000)
同上

 Metaspace       used 2563K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 273K, capacity 386K, committed 512K, reserved 1048576K
暂无解析